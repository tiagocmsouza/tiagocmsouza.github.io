[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tiago Souza",
    "section": "",
    "text": "Teste\nTeste\nTeste\nTeste\nTeste\nTeste\nTeste\nTeste\nTeste\nTeste\nTeste\nTeste Teste Teste Teste Teste Teste Teste"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Bayesian Regression - First Assessment",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n\n\nreal_estate = pd.read_csv('Real estate.csv')\nreal_estate.head(3)\n\n\n\n\n\n  \n    \n      \n      No\n      X1 transaction date\n      X2 house age\n      X3 distance to the nearest MRT station\n      X4 number of convenience stores\n      X5 latitude\n      X6 longitude\n      Y house price of unit area\n    \n  \n  \n    \n      0\n      1\n      2012.917\n      32.0\n      84.87882\n      10\n      24.98298\n      121.54024\n      37.9\n    \n    \n      1\n      2\n      2012.917\n      19.5\n      306.59470\n      9\n      24.98034\n      121.53951\n      42.2\n    \n    \n      2\n      3\n      2013.583\n      13.3\n      561.98450\n      5\n      24.98746\n      121.54391\n      47.3\n    \n  \n\n\n\n\n\nreal_estate.columns = ['transaction_number', 'transaction_date', 'house_age', 'distance_mrt_station', 'convenience_stores', 'latitude', 'longitude', 'price_unit_area']\nreal_estate.set_index('transaction_number', inplace = True)\nreal_estate['intercept'] = 1\nreal_estate.head(3)\n\n\n\n\n\n  \n    \n      \n      transaction_date\n      house_age\n      distance_mrt_station\n      convenience_stores\n      latitude\n      longitude\n      price_unit_area\n      intercept\n    \n    \n      transaction_number\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      2012.917\n      32.0\n      84.87882\n      10\n      24.98298\n      121.54024\n      37.9\n      1\n    \n    \n      2\n      2012.917\n      19.5\n      306.59470\n      9\n      24.98034\n      121.53951\n      42.2\n      1\n    \n    \n      3\n      2013.583\n      13.3\n      561.98450\n      5\n      24.98746\n      121.54391\n      47.3\n      1\n    \n  \n\n\n\n\n\nY = real_estate['price_unit_area'].to_numpy().reshape(-1,1)\nX_variables = ['intercept', 'house_age']\nX = real_estate[X_variables].to_numpy().reshape(-1, len(X_variables))\nX[1:5]\n\narray([[ 1. , 19.5],\n       [ 1. , 13.3],\n       [ 1. , 13.3],\n       [ 1. ,  5. ]])\n\n\n\nols_regression = LinearRegression(fit_intercept = False)\nols_regression.fit(X, Y)\nY_pred = ols_regression.predict(X)\n\nplt.scatter(X[:,1], Y)\nplt.plot(X[:,1], Y_pred, color='red')\nplt.xlabel('House Age')\nplt.ylabel('House Price of Unit Area')\nplt.show()\n\n\n\n\n\nalpha_ols, beta_ols = ols_regression.coef_[0]\nprint(alpha_ols, beta_ols)\n\n42.43469704626291 -0.25148841908534514"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesnâ€™t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "DFM\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2022\n\n\nTiago Souza\n\n\n\n\n\n\n\n\n\n\n\n\n\n\neconometrics\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nAug 23, 2022\n\n\nTiago Souza\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/fx_decomp/index.html",
    "href": "posts/fx_decomp/index.html",
    "title": "FX Decomposition using Dynamic Factor Models",
    "section": "",
    "text": "This post is to apply a Dynamic Factor Model to uncover common trends in currencies as well as idiosyncratic shocks that some countries might be facing.\n\\[\n\\begin{aligned}\nx^{i}_{t} = \\alpha^{i} + \\sum_{j}{\\beta^{i}_{j} f_{j} + \\varepsilon^{i}_{t}}, \\quad i = 1 \\dots n\n\\end{aligned}\n\\]\n\ndf = eurostat.get_data_df('ert_bil_eur_d', flags=False)\ndf.rename(columns = {'currency\\\\time': 'currency'}, inplace = True)\n\nlist_statinfo = ['AVG']\nlist_currency = ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'CZK', 'GBP', 'HUF', 'IDR', 'JPY', 'MXN', 'NZD', 'PLN', 'TRY', 'USD', 'ZAR']\n\ndf = df[(df['statinfo'].isin(list_statinfo)) & (df['currency'].isin(list_currency))]\ndf.drop(columns = ['unit', 'statinfo'], inplace = True)\n\ndf = pd.melt(df, id_vars = ['currency'], var_name = 'date')\ndf['date'] = df['date'].apply(lambda x: datetime.strptime(x, '%YM%mD%d'))\ndf.set_index(['date', 'currency'], inplace = True)\n\ndf = df.unstack()\ndf[('value', 'EUR')] = 1\ndf = df.mul(1 / df.loc[:,('value', 'USD')], axis = 0)\ndf.drop('USD', axis = 1, level = 'currency', inplace = True)\n\nprint(df)\n\n               value                                                     \\\ncurrency         AUD       BRL       CAD       CHF       CNY        CZK   \ndate                                                                      \n1974-07-01       NaN       NaN       NaN  2.995941       NaN        NaN   \n1974-07-02       NaN       NaN       NaN  2.990800       NaN        NaN   \n1974-07-03       NaN       NaN       NaN  2.966785       NaN        NaN   \n1974-07-04       NaN       NaN       NaN  2.977922       NaN        NaN   \n1974-07-05       NaN       NaN       NaN  2.975646       NaN        NaN   \n...              ...       ...       ...       ...       ...        ...   \n2022-09-05  1.473387  5.182157  1.314819  0.982560  6.932258  24.820565   \n2022-09-06  1.475725  5.167204  1.312349  0.981567  6.959206  24.728042   \n2022-09-07  1.491958  5.248457  1.318867  0.986343  6.977036  24.917552   \n2022-09-08  1.481067  5.199520  1.312219  0.973024  6.950145  24.520931   \n2022-09-09  1.463230  5.183302  1.300627  0.960991  6.920390  24.416360   \n\n                                                                       \\\ncurrency         GBP         HUF           IDR         JPY        MXN   \ndate                                                                    \n1974-07-01  0.419092         NaN           NaN         NaN        NaN   \n1974-07-02  0.418334         NaN           NaN         NaN        NaN   \n1974-07-03  0.417764         NaN           NaN         NaN        NaN   \n1974-07-04  0.419530         NaN           NaN         NaN        NaN   \n1974-07-05  0.418713         NaN           NaN         NaN        NaN   \n...              ...         ...           ...         ...        ...   \n2022-09-05  0.870544  407.157258  14902.046371  140.594758  19.979032   \n2022-09-06  0.863648  405.570105  14891.156326  141.931910  19.998489   \n2022-09-07  0.875164  406.504805  14951.411229  144.865959  20.154274   \n2022-09-08  0.865781  395.124388  14878.469378  143.520831  19.995004   \n2022-09-09  0.864365  394.367599  14832.650015  142.601254  19.893522   \n\n                                                                \ncurrency         NZD       PLN        TRY        ZAR       EUR  \ndate                                                            \n1974-07-01       NaN       NaN        NaN        NaN  0.828295  \n1974-07-02       NaN       NaN        NaN        NaN  0.828844  \n1974-07-03       NaN       NaN        NaN        NaN  0.826241  \n1974-07-04       NaN       NaN        NaN        NaN  0.830013  \n1974-07-05       NaN       NaN        NaN        NaN  0.828363  \n...              ...       ...        ...        ...       ...  \n2022-09-05  1.642036  4.774194  18.225000  17.225806  1.008065  \n2022-09-06  1.643131  4.740935  18.225020  17.204371  1.007252  \n2022-09-07  1.665048  4.784016  18.235913  17.458978  1.011634  \n2022-09-08  1.647617  4.711260  18.238186  17.364072  0.999101  \n2022-09-09  1.638272  4.697980  18.238830  17.290576  0.995124  \n\n[12435 rows x 16 columns]"
  },
  {
    "objectID": "posts/bayesian_regression/index.html",
    "href": "posts/bayesian_regression/index.html",
    "title": "Bayesian Regression - First Assessment",
    "section": "",
    "text": "This is my first post on Bayesian Econometrics.\n\nreal_estate = pd.read_csv('Real estate.csv')\nreal_estate.head(3)\n\n\n\n\n\n  \n    \n      \n      No\n      X1 transaction date\n      X2 house age\n      X3 distance to the nearest MRT station\n      X4 number of convenience stores\n      X5 latitude\n      X6 longitude\n      Y house price of unit area\n    \n  \n  \n    \n      0\n      1\n      2012.917\n      32.0\n      84.87882\n      10\n      24.98298\n      121.54024\n      37.9\n    \n    \n      1\n      2\n      2012.917\n      19.5\n      306.59470\n      9\n      24.98034\n      121.53951\n      42.2\n    \n    \n      2\n      3\n      2013.583\n      13.3\n      561.98450\n      5\n      24.98746\n      121.54391\n      47.3\n    \n  \n\n\n\n\n\nreal_estate.columns = ['transaction_number', 'transaction_date', 'house_age', 'distance_mrt_station', 'convenience_stores', 'latitude', 'longitude', 'price_unit_area']\nreal_estate.set_index('transaction_number', inplace = True)\nreal_estate['intercept'] = 1\nreal_estate.head(3)\n\n\n\n\n\n  \n    \n      \n      transaction_date\n      house_age\n      distance_mrt_station\n      convenience_stores\n      latitude\n      longitude\n      price_unit_area\n      intercept\n    \n    \n      transaction_number\n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      2012.917\n      32.0\n      84.87882\n      10\n      24.98298\n      121.54024\n      37.9\n      1\n    \n    \n      2\n      2012.917\n      19.5\n      306.59470\n      9\n      24.98034\n      121.53951\n      42.2\n      1\n    \n    \n      3\n      2013.583\n      13.3\n      561.98450\n      5\n      24.98746\n      121.54391\n      47.3\n      1\n    \n  \n\n\n\n\n\nY = real_estate['price_unit_area'].to_numpy().reshape(-1,1)\nX_variables = ['intercept', 'house_age']\nX = real_estate[X_variables].to_numpy().reshape(-1, len(X_variables))\nX[1:5]\n\narray([[ 1. , 19.5],\n       [ 1. , 13.3],\n       [ 1. , 13.3],\n       [ 1. ,  5. ]])\n\n\n\nols_regression = LinearRegression(fit_intercept = False)\nols_regression.fit(X, Y)\nY_pred = ols_regression.predict(X)\n\nplt.scatter(X[:,1], Y)\nplt.plot(X[:,1], Y_pred, color='red')\nplt.xlabel('House Age')\nplt.ylabel('House Price of Unit Area')\nplt.show()\n\n\n\n\n\nalpha_ols, beta_ols = ols_regression.coef_[0]\nprint(alpha_ols, beta_ols)\n\n42.43469704626291 -0.25148841908534514"
  }
]