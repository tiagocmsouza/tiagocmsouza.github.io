{
  "hash": "971cd3fd200c9ad80be4b8b303643af0",
  "result": {
    "markdown": "---\ntitle: \"Currency Beta's with respect to the EURUSD\"\nauthor: \"Tiago Souza\"\ndate: \"2023-01-20\"\ncategories: [econometrics, python]\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport eurostat\nfrom datetime import datetime\nimport statsmodels.api as sm\n```\n:::\n\n\nThis post is to check whether noise in daily data constitutes a problem in estimating currenies' sensitivity with respect to the $EURUSD$, a common exercise done in financial markets.\n\nAssume that there exists a relationship of currency $x_{t}$  with repect to the $EURUSD$ on a dily basis:\n\n\n$$\n\\begin{aligned}\nx_{t} = \\alpha_{x} + \\beta_{x} EURUSD_{t} + \\varepsilon_{t},\n\\end{aligned}\n$$\n\n\nthis equation could be estimated to find the parameters of interest (a statistical relationship, with no causal meaning!).\n\nRemeber that the estimated coefficient is given by the simple formula:\n\n$$\n\\begin{aligned}\n\\beta_{x} = \\frac{\\text{cov}(x_{t}, EURUSD_{t})}{\\text{var}(EURUSD_{t})}.\n\\end{aligned}\n$$\n\n\nHowever, estimating it this way may face difficulties given the large variance of daily data. Given that, taken the parameters as fixed, nothing prevents one from resampling the data into a different frequency:\n\n\n$$\n\\begin{aligned}\n\\frac{1}{T}\\sum_{t = 1}^{T}{x_{t}} & = \\frac{1}{T}\\sum_{t = 1}^{T}{\\alpha_{x}} + \\frac{1}{T}\\sum_{t = 1}^{T}{\\beta_{x} USD_{t}} + \\frac{1}{T}\\sum_{t = 1}^{T}{\\varepsilon_{t}} \\\\\n\\quad{} \\\\\n& \\Rightarrow x_{T} = \\alpha_{x} + \\beta_{x} USD_{T} + \\varepsilon_{T},\n\\end{aligned}\n$$\n\n\nand estimating this instead. Our taks now is to test whether running the regressions over different sample frequencies yields distinct estimated coefficients and the extent to which using daily data represents a problem.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Download and first inspection of data\n\ndf_daily = eurostat.get_data_df('ert_bil_eur_d', flags=False)\n\ndf_daily.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>freq</th>\n      <th>statinfo</th>\n      <th>unit</th>\n      <th>currency\\TIME_PERIOD</th>\n      <th>1974-07-01</th>\n      <th>1974-07-02</th>\n      <th>1974-07-03</th>\n      <th>1974-07-04</th>\n      <th>1974-07-05</th>\n      <th>1974-07-08</th>\n      <th>...</th>\n      <th>2023-01-23</th>\n      <th>2023-01-24</th>\n      <th>2023-01-25</th>\n      <th>2023-01-26</th>\n      <th>2023-01-27</th>\n      <th>2023-01-30</th>\n      <th>2023-01-31</th>\n      <th>2023-02-01</th>\n      <th>2023-02-02</th>\n      <th>2023-02-03</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39</th>\n      <td>D</td>\n      <td>AVG</td>\n      <td>NAC</td>\n      <td>ZAR</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>18.6597</td>\n      <td>18.7687</td>\n      <td>18.6745</td>\n      <td>18.6127</td>\n      <td>18.7185</td>\n      <td>18.889</td>\n      <td>18.9223</td>\n      <td>18.8328</td>\n      <td>18.7046</td>\n      <td>18.7624</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>D</td>\n      <td>END</td>\n      <td>NAC</td>\n      <td>ALL</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>D</td>\n      <td>END</td>\n      <td>NAC</td>\n      <td>BAM</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows Ã— 12539 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Create a column with dates, select columns and filter values on interest\n\nlist_statinfo = ['AVG']\nlist_currency = ['AUD', 'CHF', 'CZK', 'DKK', 'GBP', 'HUF', 'JPY', 'NOK', 'NZD', 'PLN', 'TRY', 'SEK', 'USD']\n\ndf_daily = df_daily.rename(columns = {'currency\\\\TIME_PERIOD': 'currency'})\n\ndf_daily = df_daily[(df_daily['statinfo'].isin(list_statinfo)) &\n     (df_daily['currency'].isin(list_currency))]\n\ndf_daily = df_daily.drop(columns = ['unit', 'statinfo', 'freq'])\n\ndf_daily = pd.melt(df_daily, id_vars = ['currency'], var_name = 'date')\n\nprint(df_daily.tail(3))\n\nprint(df_daily.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       currency        date    value\n162952      SEK  2023-02-03  11.3323\n162953      TRY  2023-02-03  20.5806\n162954      USD  2023-02-03   1.0937\ncurrency     object\ndate         object\nvalue       float64\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Date into the correct format and place currencies in columns\n\ndf_daily['date'] = df_daily['date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))\n\ndf_daily = (df_daily.set_index(['date', 'currency'])\n            .unstack()\n            .droplevel(level=0, axis=1))\n\ndf_daily.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>currency</th>\n      <th>AUD</th>\n      <th>CHF</th>\n      <th>CZK</th>\n      <th>DKK</th>\n      <th>GBP</th>\n      <th>HUF</th>\n      <th>JPY</th>\n      <th>NOK</th>\n      <th>NZD</th>\n      <th>PLN</th>\n      <th>SEK</th>\n      <th>TRY</th>\n      <th>USD</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-02-01</th>\n      <td>1.5392</td>\n      <td>0.9980</td>\n      <td>23.775</td>\n      <td>7.4396</td>\n      <td>0.88413</td>\n      <td>390.20</td>\n      <td>141.37</td>\n      <td>10.8569</td>\n      <td>1.6903</td>\n      <td>4.7075</td>\n      <td>11.3455</td>\n      <td>20.4978</td>\n      <td>1.0894</td>\n    </tr>\n    <tr>\n      <th>2023-02-02</th>\n      <td>1.5407</td>\n      <td>0.9992</td>\n      <td>23.809</td>\n      <td>7.4393</td>\n      <td>0.89289</td>\n      <td>387.20</td>\n      <td>141.12</td>\n      <td>10.9535</td>\n      <td>1.6855</td>\n      <td>4.7015</td>\n      <td>11.3587</td>\n      <td>20.6766</td>\n      <td>1.0988</td>\n    </tr>\n    <tr>\n      <th>2023-02-03</th>\n      <td>1.5499</td>\n      <td>0.9989</td>\n      <td>23.725</td>\n      <td>7.4443</td>\n      <td>0.89250</td>\n      <td>386.58</td>\n      <td>140.45</td>\n      <td>10.9783</td>\n      <td>1.6886</td>\n      <td>4.6920</td>\n      <td>11.3323</td>\n      <td>20.5806</td>\n      <td>1.0937</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Pll currencies with respect to the USD (we downloaded currencies with respect to the EUR)\n\ndf_daily['EUR'] = 1\n\ndf_daily = (df_daily.mul(1 / df_daily.loc[:,'USD'], axis = 0)\n            .drop('USD', axis = 1))\n\ndf_daily.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>currency</th>\n      <th>AUD</th>\n      <th>CHF</th>\n      <th>CZK</th>\n      <th>DKK</th>\n      <th>GBP</th>\n      <th>HUF</th>\n      <th>JPY</th>\n      <th>NOK</th>\n      <th>NZD</th>\n      <th>PLN</th>\n      <th>SEK</th>\n      <th>TRY</th>\n      <th>EUR</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-02-01</th>\n      <td>1.412888</td>\n      <td>0.916101</td>\n      <td>21.823940</td>\n      <td>6.829080</td>\n      <td>0.811575</td>\n      <td>358.178814</td>\n      <td>129.768680</td>\n      <td>9.965945</td>\n      <td>1.551588</td>\n      <td>4.321186</td>\n      <td>10.414448</td>\n      <td>18.815678</td>\n      <td>0.917936</td>\n    </tr>\n    <tr>\n      <th>2023-02-02</th>\n      <td>1.402166</td>\n      <td>0.909356</td>\n      <td>21.668183</td>\n      <td>6.770386</td>\n      <td>0.812605</td>\n      <td>352.384419</td>\n      <td>128.431016</td>\n      <td>9.968602</td>\n      <td>1.533946</td>\n      <td>4.278759</td>\n      <td>10.337368</td>\n      <td>18.817437</td>\n      <td>0.910084</td>\n    </tr>\n    <tr>\n      <th>2023-02-03</th>\n      <td>1.417116</td>\n      <td>0.913322</td>\n      <td>21.692420</td>\n      <td>6.806528</td>\n      <td>0.816037</td>\n      <td>353.460730</td>\n      <td>128.417299</td>\n      <td>10.037762</td>\n      <td>1.543933</td>\n      <td>4.290025</td>\n      <td>10.361434</td>\n      <td>18.817409</td>\n      <td>0.914328</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Dictionary with dataframes for analysis\n\nfreq_list = ['W', 'M', 'Q']\n\ndf_dict = {'D': df_daily.pct_change().dropna()}\n\ndef resample_data(df, freq):\n    \n    df_resampled = (df.resample(freq)\n                    .last()\n                    .pct_change()\n                    .dropna()\n                    .to_period(freq))\n\n    return df_resampled\n\ndf_dict.update({freq: resample_data(df_daily, freq) for freq in freq_list})\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Run regressions for every currency and frequency\n# Note that statsmodels handles multiple Y's separately\n\ncoeffs = []\n\nfor freq, data in df_dict.items():\n\n    data_x = sm.add_constant(data['EUR'])\n    data_y = data.drop(columns=['EUR'])\n    models = sm.OLS(data_y, data_x).fit()\n    params = (models.params.T[['EUR']].set_index(data_y.columns)\n                .rename(columns={'EUR': freq}))\n    coeffs.append(params)\n\ncoeffs = pd.concat(coeffs, axis='columns')\ncoeffs.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>D</th>\n      <th>W</th>\n      <th>M</th>\n      <th>Q</th>\n    </tr>\n    <tr>\n      <th>currency</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>PLN</th>\n      <td>0.856764</td>\n      <td>1.005148</td>\n      <td>1.012613</td>\n      <td>0.969457</td>\n    </tr>\n    <tr>\n      <th>SEK</th>\n      <td>0.953337</td>\n      <td>0.964236</td>\n      <td>0.993492</td>\n      <td>0.949884</td>\n    </tr>\n    <tr>\n      <th>TRY</th>\n      <td>0.477494</td>\n      <td>0.593587</td>\n      <td>0.525770</td>\n      <td>0.560618</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ncoeffs_plot = (coeffs.div(coeffs['D'], axis='rows')\n                .drop(columns=['D']))\n            \ncoeffs_plot.plot(kind='density')\ncoeffs_plot.plot(kind='box')\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){width=576 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-3.png){width=571 height=411}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}