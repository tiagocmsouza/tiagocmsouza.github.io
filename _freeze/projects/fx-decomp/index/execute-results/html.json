{
  "hash": "25d76fbd3a4a12aef9a7c593ba82ccf1",
  "result": {
    "markdown": "---\ntitle: \"FX Decomposition using Dynamic Factor Models\"\nauthor: \"Tiago Souza\"\ndate: \"2022-09-11\"\ncategories: [DFM, python]\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport eurostat\nfrom datetime import datetime\nimport statsmodels.api as sm\n```\n:::\n\n\nThis post is to apply a Dynamic Factor Model to uncover common trends in currencies as well as idiosyncratic shocks that some countries might be facing.\n\n\n$$\n\\begin{aligned}\nx^{i}_{t} = \\alpha^{i} + \\sum_{j}{\\beta^{i}_{j} f_{j} + \\varepsilon^{i}_{t}}, \\quad i = 1 \\dots n\n\\end{aligned}\n$$\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = eurostat.get_data_df('ert_bil_eur_d', flags=False)\ndf.rename(columns = {'currency\\\\TIME_PERIOD': 'currency'}, inplace = True)\n\nlist_statinfo = ['AVG']\nlist_currency = ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'CZK', 'GBP', 'HUF', 'IDR', \\\n     'JPY', 'MXN', 'NZD', 'PLN', 'TRY', 'USD', 'ZAR']\n\ndf = df[(df['statinfo'].isin(list_statinfo)) & \\\n     (df['currency'].isin(list_currency))]\ndf.drop(columns = ['unit', 'statinfo', 'freq'], inplace = True)\n\ndf = pd.melt(df, id_vars = ['currency'], var_name = 'date')\n\ndf['date'] = df['date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))\ndf.set_index(['date', 'currency'], inplace = True)\n\ndf = df.unstack()\ndf[('value', 'EUR')] = 1\ndf = df.mul(1 / df.loc[:,('value', 'USD')], axis = 0)\ndf.drop('USD', axis = 1, level = 'currency', inplace = True)\nlist_currency = [x if x != 'USD' else 'EUR' for x in list_currency]\n\ndf = df.stack()\ndf.reset_index(level = 'currency', inplace = True)\ndf = df.pivot(columns = 'currency', values = 'value')\ndf = df.resample('M') \\\n     .last() \\\n     .pct_change() \\\n     .to_period('M')\n\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>currency</th>\n      <th>AUD</th>\n      <th>BRL</th>\n      <th>CAD</th>\n      <th>CHF</th>\n      <th>CNY</th>\n      <th>CZK</th>\n      <th>EUR</th>\n      <th>GBP</th>\n      <th>HUF</th>\n      <th>IDR</th>\n      <th>JPY</th>\n      <th>MXN</th>\n      <th>NZD</th>\n      <th>PLN</th>\n      <th>TRY</th>\n      <th>ZAR</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2022-10</th>\n      <td>0.012801</td>\n      <td>-0.014687</td>\n      <td>-0.005591</td>\n      <td>0.020690</td>\n      <td>0.025950</td>\n      <td>-0.019187</td>\n      <td>-0.016744</td>\n      <td>-0.041075</td>\n      <td>-0.045926</td>\n      <td>0.024687</td>\n      <td>0.027813</td>\n      <td>-0.013094</td>\n      <td>-0.021209</td>\n      <td>-0.045096</td>\n      <td>0.003488</td>\n      <td>0.019047</td>\n    </tr>\n    <tr>\n      <th>2022-11</th>\n      <td>-0.050925</td>\n      <td>-0.001570</td>\n      <td>-0.011532</td>\n      <td>-0.051361</td>\n      <td>-0.030573</td>\n      <td>-0.050379</td>\n      <td>-0.044526</td>\n      <td>-0.040387</td>\n      <td>-0.047441</td>\n      <td>0.003728</td>\n      <td>-0.064750</td>\n      <td>-0.030038</td>\n      <td>-0.070510</td>\n      <td>-0.053657</td>\n      <td>0.000881</td>\n      <td>-0.075902</td>\n    </tr>\n    <tr>\n      <th>2022-12</th>\n      <td>-0.010287</td>\n      <td>-0.003815</td>\n      <td>0.001882</td>\n      <td>-0.027880</td>\n      <td>-0.025268</td>\n      <td>-0.036063</td>\n      <td>-0.027189</td>\n      <td>-0.002388</td>\n      <td>-0.045126</td>\n      <td>-0.012362</td>\n      <td>-0.051597</td>\n      <td>0.013884</td>\n      <td>-0.017598</td>\n      <td>-0.023580</td>\n      <td>0.004592</td>\n      <td>0.001690</td>\n    </tr>\n    <tr>\n      <th>2023-01</th>\n      <td>-0.029031</td>\n      <td>-0.033104</td>\n      <td>-0.006552</td>\n      <td>0.003082</td>\n      <td>-0.020554</td>\n      <td>-0.028644</td>\n      <td>-0.015416</td>\n      <td>-0.022299</td>\n      <td>-0.039879</td>\n      <td>-0.029556</td>\n      <td>-0.011146</td>\n      <td>-0.037127</td>\n      <td>-0.011899</td>\n      <td>-0.009484</td>\n      <td>0.004991</td>\n      <td>0.029394</td>\n    </tr>\n    <tr>\n      <th>2023-02</th>\n      <td>-0.008037</td>\n      <td>-0.008776</td>\n      <td>-0.006382</td>\n      <td>-0.013755</td>\n      <td>-0.002865</td>\n      <td>-0.012298</td>\n      <td>-0.009509</td>\n      <td>0.003728</td>\n      <td>-0.020480</td>\n      <td>-0.007676</td>\n      <td>-0.015258</td>\n      <td>-0.006284</td>\n      <td>-0.007864</td>\n      <td>-0.013085</td>\n      <td>0.000304</td>\n      <td>-0.017879</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nlist_em = ['BRL', 'CHF', 'CZK', 'HUF', 'IDR', 'MXN', 'PLN', 'TRY', 'ZAR']\n\nlist_dm = list(set(list_currency) - set(list_em))\n\nfactors_mq = {x: ['usd', 'em'] if x in list_em else ['usd', 'dm'] for x in list_currency}\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf_est = df.loc['2000-01':].copy()\n\ndf_est.plot()\nplt.show()\n\nmodel = sm.tsa.DynamicFactorMQ(df_est, factors=factors_mq)\nresult = model.fit(disp=False)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=582 height=429}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf_est['factor_usd'] = result.factors.smoothed['usd']\ndf_est['factor_em'] = result.factors.smoothed['em']\ndf_est['factor_dm'] = result.factors.smoothed['dm']\n\ndf_est['factor_usd'].plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=569 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}