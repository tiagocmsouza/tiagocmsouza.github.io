{
  "hash": "96cf8a2b5523f9a6fe5eaa445021ecca",
  "result": {
    "markdown": "---\ntitle: \"FX Decomposition using Dynamic Factor Models\"\nauthor: \"Tiago Souza\"\ndate: \"2022-09-11\"\ncategories: [DFM, python]\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport eurostat\nfrom datetime import datetime\nimport statsmodels.api as sm\n```\n:::\n\n\nThis post is to apply a Dynamic Factor Model to uncover common trends in currencies as well as idiosyncratic shocks that some countries might be facing.\n\n\n$$\n\\begin{aligned}\nx^{i}_{t} = \\alpha^{i} + \\sum_{j}{\\beta^{i}_{j} f_{j} + \\varepsilon^{i}_{t}}, \\quad i = 1 \\dots n\n\\end{aligned}\n$$\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = eurostat.get_data_df('ert_bil_eur_d', flags=False)\ndf.rename(columns = {'currency\\\\TIME_PERIOD': 'currency'}, inplace = True)\n\nlist_statinfo = ['AVG']\nlist_currency = ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'CZK', 'GBP', 'HUF', 'IDR', \\\n     'JPY', 'MXN', 'NZD', 'PLN', 'TRY', 'USD', 'ZAR']\n\ndf = df[(df['statinfo'].isin(list_statinfo)) & \\\n     (df['currency'].isin(list_currency))]\ndf.drop(columns = ['unit', 'statinfo', 'freq'], inplace = True)\n\ndf = pd.melt(df, id_vars = ['currency'], var_name = 'date')\n\ndf['date'] = df['date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))\ndf.set_index(['date', 'currency'], inplace = True)\n\ndf = df.unstack()\ndf[('value', 'EUR')] = 1\ndf = df.mul(1 / df.loc[:,('value', 'USD')], axis = 0)\ndf.drop('USD', axis = 1, level = 'currency', inplace = True)\nlist_currency.remove('USD')\n\ndf = df.stack()\ndf.reset_index(level = 'currency', inplace = True)\ndf = df.pivot(columns = 'currency', values = 'value')\n#df = df.resample('M').last()\n\ndf.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>currency</th>\n      <th>AUD</th>\n      <th>BRL</th>\n      <th>CAD</th>\n      <th>CHF</th>\n      <th>CNY</th>\n      <th>CZK</th>\n      <th>EUR</th>\n      <th>GBP</th>\n      <th>HUF</th>\n      <th>IDR</th>\n      <th>JPY</th>\n      <th>MXN</th>\n      <th>NZD</th>\n      <th>PLN</th>\n      <th>TRY</th>\n      <th>ZAR</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-05</th>\n      <td>1.463541</td>\n      <td>5.382511</td>\n      <td>1.350439</td>\n      <td>0.928120</td>\n      <td>6.873220</td>\n      <td>22.665786</td>\n      <td>0.943307</td>\n      <td>0.832969</td>\n      <td>374.379775</td>\n      <td>15605.197623</td>\n      <td>132.959155</td>\n      <td>19.376663</td>\n      <td>1.587775</td>\n      <td>4.405245</td>\n      <td>18.770116</td>\n      <td>17.097444</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>1.484762</td>\n      <td>5.336571</td>\n      <td>1.364857</td>\n      <td>0.939429</td>\n      <td>6.861429</td>\n      <td>22.908571</td>\n      <td>0.952381</td>\n      <td>0.842619</td>\n      <td>378.057143</td>\n      <td>15684.095238</td>\n      <td>134.571429</td>\n      <td>19.299524</td>\n      <td>1.608476</td>\n      <td>4.471429</td>\n      <td>18.768095</td>\n      <td>17.342095</td>\n    </tr>\n    <tr>\n      <th>2023-01-09</th>\n      <td>1.444091</td>\n      <td>5.280011</td>\n      <td>1.336855</td>\n      <td>0.922307</td>\n      <td>6.782536</td>\n      <td>22.428945</td>\n      <td>0.934929</td>\n      <td>0.823186</td>\n      <td>371.400524</td>\n      <td>15577.711294</td>\n      <td>132.152206</td>\n      <td>19.149682</td>\n      <td>1.565165</td>\n      <td>4.390707</td>\n      <td>18.775617</td>\n      <td>17.021223</td>\n    </tr>\n    <tr>\n      <th>2023-01-10</th>\n      <td>1.456309</td>\n      <td>5.266343</td>\n      <td>1.341229</td>\n      <td>0.923995</td>\n      <td>6.782803</td>\n      <td>22.366875</td>\n      <td>0.932575</td>\n      <td>0.823743</td>\n      <td>372.097361</td>\n      <td>15550.750723</td>\n      <td>132.351021</td>\n      <td>19.145668</td>\n      <td>1.574093</td>\n      <td>4.378439</td>\n      <td>18.777954</td>\n      <td>17.071155</td>\n    </tr>\n    <tr>\n      <th>2023-01-11</th>\n      <td>1.450451</td>\n      <td>5.195869</td>\n      <td>1.342607</td>\n      <td>0.927422</td>\n      <td>6.774635</td>\n      <td>22.356937</td>\n      <td>0.930492</td>\n      <td>0.825095</td>\n      <td>371.359449</td>\n      <td>15457.653299</td>\n      <td>132.697497</td>\n      <td>19.071090</td>\n      <td>1.573648</td>\n      <td>4.356472</td>\n      <td>18.776682</td>\n      <td>17.011910</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nlist_em = ['BRL', 'CHF', 'CZK', 'HUF', 'IDR', 'MXN', 'PLN', 'TRY', 'ZAR']\n\nlist_dm = list(set(list_currency) - set(list_em))\n\nfactors_mq = {x: ['usd', 'em'] if x in list_em else ['usd', 'dm'] for x in list_currency}\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf_est = df.loc['2000-01-01':].copy()\n\nendog_em = df_est[list_em].pct_change()\nendog_dm = df_est[list_dm].pct_change()\n\nplt.plot(endog_em)\nplt.legend()\n\nmodel_em = sm.tsa.DynamicFactor(endog_em, k_factors=1, factor_order=1, error_order=1)\nresult_em = model_em.fit(disp=False)\n\nmodel_dm = sm.tsa.DynamicFactor(endog_dm, k_factors=1, factor_order=1, error_order=1)\nresult_dm = model_dm.fit(disp=False)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/statsmodels/base/model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n  warnings.warn(\"Maximum Likelihood optimization failed to \"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/statsmodels/base/model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n  warnings.warn(\"Maximum Likelihood optimization failed to \"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-6.png){width=595 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf_est['factor_em'] = result_em.factors.smoothed[0]\ndf_est['factor_dm'] = result_dm.factors.smoothed[0]\n\nendog_global = df_est[['factor_em', 'factor_dm']]\n\nplt.plot(endog_global)\nplt.legend()\n\nmodel_global = sm.tsa.DynamicFactor(endog_global, k_factors=1, factor_order=1, error_order=1)\nresult_global = model_global.fit(disp=False)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/statsmodels/base/model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n  warnings.warn(\"Maximum Likelihood optimization failed to \"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-4.png){width=595 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf_est['factor_global'] = result_global.factors.smoothed[0]\n\nplt.plot(df_est['factor_global'])\nplt.legend()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<matplotlib.legend.Legend at 0x13ebeb6d0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-3.png){width=582 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# model = sm.tsa.DynamicFactorMQ(\n#     endog_m, endog_quarterly=endog_q,\n#     factors=factors, factor_orders=factor_orders,\n#     factor_multiplicities=factor_multiplicities)\nprint(df_est[['factor_em', 'factor_dm', 'factor_global']].tail(15))\nfrom scipy.stats import pearsonr\ncorr, _ = pearsonr(df_est['factor_em'], df_est['factor_dm'])\nprint('Pearsons correlation: %.3f' % corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncurrency    factor_em  factor_dm  factor_global\ndate                                           \n2022-12-21  -0.059927  -0.081435       0.735832\n2022-12-22  -0.022280   0.005360       0.186527\n2022-12-23  -0.002162   0.017472      -0.014107\n2022-12-27   0.041217  -0.045417      -0.248542\n2022-12-28   0.022716  -0.107312       0.049828\n2022-12-29  -0.069029   0.119988       0.364497\n2022-12-30  -0.017344  -0.126943       0.454206\n2023-01-02  -0.000055   0.011553      -0.005445\n2023-01-03   0.156686   0.176762      -1.906100\n2023-01-04  -0.145457  -0.232314       1.955902\n2023-01-05   0.014978   0.019381      -0.183115\n2023-01-06   0.127845   0.171858      -1.619197\n2023-01-09  -0.202377  -0.372399       2.822352\n2023-01-10  -0.006585   0.084640      -0.153977\n2023-01-11  -0.029203  -0.029067       0.331555\nPearsons correlation: 0.698\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}