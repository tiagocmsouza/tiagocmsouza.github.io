{
  "hash": "874c76ec303c7d134cc8652cef918033",
  "result": {
    "markdown": "---\ntitle: \"Currency Beta's with respect to the USD\"\nauthor: \"Tiago Souza\"\ndate: \"2023-01-20\"\ncategories: [econometrics, python]\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport eurostat\nfrom datetime import datetime\nimport statsmodels.api as sm\n```\n:::\n\n\nThis post is to check whether noise in daily data constitutes a problem to the estimation of currenies' sensitivity with respect to the $USD$, a common exercise done in financial markets.\n\nAssume that there exists a relationship of currency $x_{t}$  with repect to the $USD$ on a dily basis:\n\n\n$$\n\\begin{aligned}\nx_{t} = \\alpha_{x} + \\beta_{x} USD_{t} + \\varepsilon_{t},\n\\end{aligned}\n$$\n\n\nthis equation could be estimated to find the parameters of interest (a statistical relationship, with no causal meaning!).\n\nRemeber that the estimated coefficient is given by the simple formula:\n\n$$\n\\begin{aligned}\n\\beta_{x} = \\frac{\\text{cov}(x_{t}, USD_{t})}{\\text{var}(USD_{t})}.\n\\end{aligned}\n$$\n\n\nHowever, estimating this coefficint this way may face difficulties given the large variance of daily data.  Given that, taken the parameters as fixed, nothing prevents one from resampling the data into a different frequency:\n\n\n$$\n\\begin{aligned}\n\\frac{1}{T}\\sum_{t = 1}^{T}{x_{t}} & = \\frac{1}{T}\\sum_{t = 1}^{T}{\\alpha_{x}} + \\frac{1}{T}\\sum_{t = 1}^{T}{\\beta_{x} USD_{t}} + \\frac{1}{T}\\sum_{t = 1}^{T}{\\varepsilon_{t}} \\\\\n\\quad{} \\\\\n& \\Rightarrow x_{T} = \\alpha_{x} + \\beta_{x} USD_{T} + \\varepsilon_{T}\n\\end{aligned}\n$$\n\n\nOur taks now is to test whether running the regressions over different sample frequencies yields distinct estimated coefficients.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Download and first inspection \n\ndf_daily = eurostat.get_data_df('ert_bil_eur_d', flags=False)\n\ndf_daily.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>freq</th>\n      <th>statinfo</th>\n      <th>unit</th>\n      <th>currency\\TIME_PERIOD</th>\n      <th>1974-07-01</th>\n      <th>1974-07-02</th>\n      <th>1974-07-03</th>\n      <th>1974-07-04</th>\n      <th>1974-07-05</th>\n      <th>1974-07-08</th>\n      <th>...</th>\n      <th>2023-01-09</th>\n      <th>2023-01-10</th>\n      <th>2023-01-11</th>\n      <th>2023-01-12</th>\n      <th>2023-01-13</th>\n      <th>2023-01-16</th>\n      <th>2023-01-17</th>\n      <th>2023-01-18</th>\n      <th>2023-01-19</th>\n      <th>2023-01-20</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39</th>\n      <td>D</td>\n      <td>AVG</td>\n      <td>NAC</td>\n      <td>ZAR</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>18.2059</td>\n      <td>18.3054</td>\n      <td>18.2827</td>\n      <td>18.1417</td>\n      <td>18.2482</td>\n      <td>18.445</td>\n      <td>18.6027</td>\n      <td>18.396</td>\n      <td>18.6931</td>\n      <td>18.577</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>D</td>\n      <td>END</td>\n      <td>NAC</td>\n      <td>ALL</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>D</td>\n      <td>END</td>\n      <td>NAC</td>\n      <td>BAM</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows Ã— 12529 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Create a column with dates, select columns and filter values on interest\n\nlist_statinfo = ['AVG']\nlist_currency = ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'CZK', 'GBP', 'HUF', 'IDR', 'JPY', 'MXN', 'NZD', 'PLN', 'TRY', 'USD', 'ZAR']\n\ndf_daily.rename(columns = {'currency\\\\TIME_PERIOD': 'currency'}, inplace = True)\n\ndf_daily = df_daily[(df_daily['statinfo'].isin(list_statinfo)) & \\\n     (df_daily['currency'].isin(list_currency))]\n\ndf_daily.drop(columns = ['unit', 'statinfo', 'freq'], inplace = True)\n\ndf_daily = pd.melt(df_daily, id_vars = ['currency'], var_name = 'date')\n\nprint(df_daily.tail(3))\nprint(df_daily.dtypes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       currency        date    value\n200397      TRY  2023-01-20  20.3566\n200398      USD  2023-01-20   1.0826\n200399      ZAR  2023-01-20  18.5770\ncurrency     object\ndate         object\nvalue       float64\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Transform date into the correct format and place currencies in columns\n\ndf_daily['date'] = df_daily['date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))\n\ndf_daily.set_index(['date', 'currency'], inplace = True)\n\ndf_daily = df_daily.unstack()\n\ndf_daily = df_daily.droplevel(level=0, axis=1)\n\ndf_daily.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>currency</th>\n      <th>AUD</th>\n      <th>BRL</th>\n      <th>CAD</th>\n      <th>CHF</th>\n      <th>CNY</th>\n      <th>CZK</th>\n      <th>GBP</th>\n      <th>HUF</th>\n      <th>IDR</th>\n      <th>JPY</th>\n      <th>MXN</th>\n      <th>NZD</th>\n      <th>PLN</th>\n      <th>TRY</th>\n      <th>USD</th>\n      <th>ZAR</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-18</th>\n      <td>1.5413</td>\n      <td>5.5252</td>\n      <td>1.4505</td>\n      <td>0.9906</td>\n      <td>7.3193</td>\n      <td>23.954</td>\n      <td>0.87530</td>\n      <td>396.15</td>\n      <td>16307.20</td>\n      <td>139.79</td>\n      <td>20.2193</td>\n      <td>1.6683</td>\n      <td>4.6983</td>\n      <td>20.3706</td>\n      <td>1.0839</td>\n      <td>18.3960</td>\n    </tr>\n    <tr>\n      <th>2023-01-19</th>\n      <td>1.5726</td>\n      <td>5.6326</td>\n      <td>1.4603</td>\n      <td>0.9921</td>\n      <td>7.3424</td>\n      <td>23.924</td>\n      <td>0.87648</td>\n      <td>396.43</td>\n      <td>16429.66</td>\n      <td>139.02</td>\n      <td>20.5437</td>\n      <td>1.6978</td>\n      <td>4.7063</td>\n      <td>20.3295</td>\n      <td>1.0815</td>\n      <td>18.6931</td>\n    </tr>\n    <tr>\n      <th>2023-01-20</th>\n      <td>1.5619</td>\n      <td>5.6271</td>\n      <td>1.4583</td>\n      <td>0.9962</td>\n      <td>7.3425</td>\n      <td>23.922</td>\n      <td>0.87600</td>\n      <td>395.88</td>\n      <td>16367.67</td>\n      <td>140.86</td>\n      <td>20.4865</td>\n      <td>1.6852</td>\n      <td>4.7100</td>\n      <td>20.3566</td>\n      <td>1.0826</td>\n      <td>18.5770</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Put all currencies with respect to the USD (we downloaded currencies with respect to the EUR)\n\ndf_daily['EUR'] = 1\n\ndf_daily = df_daily.mul(1 / df_daily.loc[:,'USD'], axis = 0)\n\ndf_daily.drop('USD', axis = 1, inplace = True)\n\ndf_daily.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>currency</th>\n      <th>AUD</th>\n      <th>BRL</th>\n      <th>CAD</th>\n      <th>CHF</th>\n      <th>CNY</th>\n      <th>CZK</th>\n      <th>GBP</th>\n      <th>HUF</th>\n      <th>IDR</th>\n      <th>JPY</th>\n      <th>MXN</th>\n      <th>NZD</th>\n      <th>PLN</th>\n      <th>TRY</th>\n      <th>ZAR</th>\n      <th>EUR</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-18</th>\n      <td>1.421995</td>\n      <td>5.097518</td>\n      <td>1.338223</td>\n      <td>0.913922</td>\n      <td>6.752745</td>\n      <td>22.099825</td>\n      <td>0.807547</td>\n      <td>365.485746</td>\n      <td>15044.930344</td>\n      <td>128.969462</td>\n      <td>18.654212</td>\n      <td>1.539164</td>\n      <td>4.334625</td>\n      <td>18.793800</td>\n      <td>16.972045</td>\n      <td>0.922594</td>\n    </tr>\n    <tr>\n      <th>2023-01-19</th>\n      <td>1.454092</td>\n      <td>5.208137</td>\n      <td>1.350254</td>\n      <td>0.917337</td>\n      <td>6.789089</td>\n      <td>22.121128</td>\n      <td>0.810430</td>\n      <td>366.555710</td>\n      <td>15191.548775</td>\n      <td>128.543689</td>\n      <td>18.995562</td>\n      <td>1.569857</td>\n      <td>4.351641</td>\n      <td>18.797503</td>\n      <td>17.284420</td>\n      <td>0.924642</td>\n    </tr>\n    <tr>\n      <th>2023-01-20</th>\n      <td>1.442730</td>\n      <td>5.197765</td>\n      <td>1.347035</td>\n      <td>0.920192</td>\n      <td>6.782283</td>\n      <td>22.096804</td>\n      <td>0.809163</td>\n      <td>365.675226</td>\n      <td>15118.852762</td>\n      <td>130.112692</td>\n      <td>18.923425</td>\n      <td>1.556623</td>\n      <td>4.350637</td>\n      <td>18.803436</td>\n      <td>17.159616</td>\n      <td>0.923702</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Dictionary with dataframes for analysis\n\nfreq_list = ['W', 'M', 'Q']\n\ndf_dict = {'D': df_daily.pct_change().dropna()}\n\ndef resample_data(df, freq):\n    \n    df_resampled = df.resample(freq) \\\n        .last() \\\n        .pct_change() \\\n        .dropna() \\\n        .to_period(freq)\n\n    return df_resampled\n\ndf_dict.update({freq: resample_data(df_daily, freq) for freq in freq_list})\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}